{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cocotb VIP templates","text":"<p>Template file for creation of cocotb VIP</p>"},{"location":"#package-installation","title":"Package Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install cocotb-vip-templates\n</code></pre>"},{"location":"#package-documents","title":"Package Documents","text":"<ul> <li>50 words description of supported protocol (Name, link to std, rev supported etc.)</li> <li>Example of how to use the package in your code.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jahagirdar.vs@dyumnin.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd cocotb-vip-templates\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run cocotb-vip-templates [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build cocotb-vip-templates. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>cocotb</code> cocotb is a coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python. <code>&gt;=1.9.1</code> <code>1.9.1</code> BSD <code>cocotb-bus</code> <code>&gt;=0.2.1</code> <code>0.2.1</code> ? <code>find-libpython</code> Finds the libpython associated with your environment, wherever it may be hiding <code>0.4.0</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.16.0</code> BSD-3-Clause <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>24.10.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.8.30</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.4.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.5.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.10</code> BSD License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.4</code> BSD License <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.9.3</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>3.0.2</code> BSD License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.6.1</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=1.2</code> <code>1.2.0</code> ISC <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.4.1</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.5.42</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.26.2</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.12.2</code> ISC <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>24.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2</code> <code>4.3.6</code> MIT License <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.11.2</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.9.11</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.32.3</code> Apache-2.0 <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.2</code> MIT License <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.12.2</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.2.3</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>5.0.3</code> Apache-2.0"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#setting-up-your-environment","title":"Setting up your environment","text":"<pre><code>python3 -m pip install --user pipx\npipx install pdm\npdm install\npdm install -g ci-quality\npdm run pre-commit install\n</code></pre> <p>or simply run make install which will execute the above commands. <pre><code>make install\n</code></pre></p>"},{"location":"dev/#coding","title":"Coding","text":"<ul> <li>Your cocotbext code should go in the src/cocotbext.../folder.</li> <li>Templates are already present in the folder modify them as per need.</li> <li>Always create a feature branch. Read git branching workflow</li> </ul>"},{"location":"dev/#pre-commit-checks","title":"Pre commit checks","text":"<p>In the root of the repo run</p> <pre><code>pdm run duty check\n</code></pre> <p>Fix any warnings that are reported before checking in the code.</p> <p>Then</p> <p><pre><code>git commit -a\ngit push\n</code></pre> Note: 1. NEVER COMMIT BINARY FILES OR FILES GENERATED BY TOOLS 2. Never run <code>git add .</code> or <code>git add *</code> always run <code>git add &lt;filename&gt;</code> 3. Before writing the commit message see what files are getting committed and what files are ignored. If you see any issue abort the commit, fix the issue and then commit. 4. Before adding any file ask yourself the following questions, If you cannot answer them do not add/commit these files.     1. \"I will need this file after 2 months because...\"     2. This file cannot be generated when needed because ...\" ```</p>"},{"location":"dev/#tasks","title":"Tasks","text":"<ol> <li>Create a feature branch called docs and update the document.</li> <li>create feature branch called ext and write the extension code there.</li> </ol>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Vijayvithal Jahagirdar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> cocotb_vip_templates<ul> <li> bus</li> <li> config</li> <li> debug</li> <li> driver</li> <li> driver_master</li> <li> driver_slave</li> <li> monitor</li> </ul> </li> </ul>"},{"location":"reference/cocotb_vip_templates/","title":"Index","text":""},{"location":"reference/cocotb_vip_templates/#cocotb_vip_templates","title":"cocotb_vip_templates","text":"<p>Cocotb VIP templates package.</p> <p>Template file for creation of cocotb VIP</p> <p>Modules:</p> <ul> <li> <code>bus</code>           \u2013            <p>Bus.</p> </li> <li> <code>config</code>           \u2013            <p>Configuration for the VIP.</p> </li> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>driver</code>           \u2013            <p>DriverClass.</p> </li> <li> <code>driver_master</code>           \u2013            <p>Driver when VIP is bus master.</p> </li> <li> <code>driver_slave</code>           \u2013            <p>Driver when VIP is slave.</p> </li> <li> <code>monitor</code>           \u2013            <p>Monitor Class.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/bus/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bus","text":""},{"location":"reference/cocotb_vip_templates/bus/#cocotb_vip_templates.bus","title":"bus","text":"<p>Bus.</p> <p>Classes:</p> <ul> <li> <code>Bus</code>           \u2013            <p>Bus class for?</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/bus/#cocotb_vip_templates.bus.Bus","title":"Bus","text":"<pre><code>Bus(\n    dut: SigHandle,\n    prefix: str = \"\",\n    suffix: str = \"\",\n    bus_seperator: str = \"_\",\n    clk: str = \"clk\",\n    reset: str = \"rst_n\",\n    active_high_reset: bool = True,\n    uppercase: bool = False,\n)\n</code></pre> <p>Bus class for?</p> <p>Args: dut (SimHandle): ... prefix (str):...</p> <p>Methods:</p> <ul> <li> <code>get_bus</code>             \u2013              <p>Creates and returns the bus object.</p> </li> <li> <code>get_somespecialfunction_bus</code>             \u2013              <p>This function handles a special signal naming convention seen in this protocol that is not covered by the default bus structure and creates and returns the bus.</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/bus.py</code> <pre><code>def __init__(\n    self,\n    dut: cocotb.SigHandle,\n    prefix: str = \"\",\n    suffix: str = \"\",\n    bus_seperator: str = \"_\",\n    clk: str = \"clk\",\n    reset: str = \"rst_n\",\n    active_high_reset: bool = True,\n    uppercase: bool = False,\n):\n    \"\"\"Constructor for?\n\n    Args:\n    dut (SimHandle): ...\n    prefix (str):...\n    \"\"\"\n</code></pre>"},{"location":"reference/cocotb_vip_templates/bus/#cocotb_vip_templates.bus.Bus.get_bus","title":"get_bus","text":"<pre><code>get_bus() -&gt; Bus\n</code></pre> <p>Creates and returns the bus object.</p> Source code in <code>src/cocotb_vip_templates/bus.py</code> <pre><code>def get_bus(self) -&gt; BusBaseClass:\n    \"\"\"Creates and returns the bus object.\"\"\"\n    return BusBaseClass()\n</code></pre>"},{"location":"reference/cocotb_vip_templates/bus/#cocotb_vip_templates.bus.Bus.get_somespecialfunction_bus","title":"get_somespecialfunction_bus","text":"<pre><code>get_somespecialfunction_bus(params: int) -&gt; Bus\n</code></pre> <p>This function handles a special signal naming convention seen in this protocol that is not covered by the default bus structure and creates and returns the bus.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>int</code>)           \u2013            <p>...</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/bus.py</code> <pre><code>def get_somespecialfunction_bus(self, params: int) -&gt; BusBaseClass:\n    \"\"\"This function handles a special signal naming convention seen in this protocol that is not covered by the default bus structure and creates and returns the bus.\n\n    Args:\n        params (int):...\n    \"\"\"\n    cocotb.log.info(params)\n    return BusBaseClass()\n</code></pre>"},{"location":"reference/cocotb_vip_templates/config/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> config","text":""},{"location":"reference/cocotb_vip_templates/config/#cocotb_vip_templates.config","title":"config","text":"<p>Configuration for the VIP.</p> <p>The VIP will require configuration related to timing parameters, clock generators etc. Define a config class which allows changing the VIP behavior.</p> <p>Classes:</p> <ul> <li> <code>Config</code>           \u2013            <p>Fill this.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/config/#cocotb_vip_templates.config.Config","title":"Config","text":"<pre><code>Config(\n    param_a: int = 1, param_b: int = 2, xyz: bool = True\n)\n</code></pre> <p>Fill this.</p> <p>Methods:</p> <ul> <li> <code>set_xyz</code>             \u2013              <p>Describe what this setter does.</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/config.py</code> <pre><code>def __init__(self, param_a: int = 1, param_b: int = 2, xyz: bool = True):\n    \"\"\"Describe what the constructor does. describe all the parameters.\"\"\"\n    self.param_a = param_a\n    self.param_b = param_b\n    self.xyz = xyz\n</code></pre>"},{"location":"reference/cocotb_vip_templates/config/#cocotb_vip_templates.config.Config.set_xyz","title":"set_xyz","text":"<pre><code>set_xyz(new_xyz: bool) -&gt; None\n</code></pre> <p>Describe what this setter does.</p> Source code in <code>src/cocotb_vip_templates/config.py</code> <pre><code>def set_xyz(self, new_xyz: bool) -&gt; None:\n    \"\"\"Describe what this setter does.\"\"\"\n    self.xyz = new_xyz\n</code></pre>"},{"location":"reference/cocotb_vip_templates/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"cocotb-vip-templates\"]\n    variables = [\n        \"PYTHONPATH\",\n        *[var for var in os.environ if var.startswith(\"COCOTB_VIP_TEMPLATES\")],\n    ]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'cocotb-vip-templates') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'cocotb-vip-templates'</code> )           \u2013            <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/debug.py</code> <pre><code>def get_version(dist: str = \"cocotb-vip-templates\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/cocotb_vip_templates/debug/#cocotb_vip_templates.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/cocotb_vip_templates/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> driver","text":""},{"location":"reference/cocotb_vip_templates/driver/#cocotb_vip_templates.driver","title":"driver","text":"<p>DriverClass.</p>"},{"location":"reference/cocotb_vip_templates/driver_master/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> driver_master","text":""},{"location":"reference/cocotb_vip_templates/driver_master/#cocotb_vip_templates.driver_master","title":"driver_master","text":"<p>Driver when VIP is bus master.</p> <p>Classes:</p> <ul> <li> <code>MasterDriver</code>           \u2013            <p>Protocol driver.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/driver_master/#cocotb_vip_templates.driver_master.MasterDriver","title":"MasterDriver","text":"<pre><code>MasterDriver()\n</code></pre> <p>Protocol driver.</p> <p>Methods:</p> <ul> <li> <code>anyothervipcmd</code>             \u2013              <p>Any other command that is mentioned in VIP document.</p> </li> <li> <code>read</code>             \u2013              <p>Read from dut.</p> </li> <li> <code>write</code>             \u2013              <p>Write to DUT.</p> </li> </ul> Source code in <code>src/cocotb_vip_templates/driver_master.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructor.\"\"\"\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_master/#cocotb_vip_templates.driver_master.MasterDriver.anyothervipcmd","title":"anyothervipcmd","text":"<pre><code>anyothervipcmd() -&gt; None\n</code></pre> <p>Any other command that is mentioned in VIP document.</p> Source code in <code>src/cocotb_vip_templates/driver_master.py</code> <pre><code>def anyothervipcmd(self) -&gt; None:\n    \"\"\"Any other command that is mentioned in VIP document.\"\"\"\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_master/#cocotb_vip_templates.driver_master.MasterDriver.read","title":"read","text":"<pre><code>read(address: int, length: int = 4) -&gt; bytes\n</code></pre> <p>Read from dut.</p> Source code in <code>src/cocotb_vip_templates/driver_master.py</code> <pre><code>def read(self, address: int, length: int = 4) -&gt; bytes:\n    \"\"\"Read from dut.\"\"\"\n    cocotb.log.info(f\"Dummy read got {address} {length} returning 4 bytes of 0\")\n    return int.to_bytes(0, 4, \"little\")\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_master/#cocotb_vip_templates.driver_master.MasterDriver.write","title":"write","text":"<pre><code>write(address: int, data: bytes) -&gt; None\n</code></pre> <p>Write to DUT.</p> Source code in <code>src/cocotb_vip_templates/driver_master.py</code> <pre><code>def write(self, address: int, data: bytes) -&gt; None:\n    \"\"\"Write to DUT.\"\"\"\n    cocotb.log.info(\n        f\"Dummy write  got {address} {data} doing nothing.\",  # type:ignore[str-bytes-safe]\n    )\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_slave/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> driver_slave","text":""},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave","title":"driver_slave","text":"<p>Driver when VIP is slave.</p> <p>Classes:</p> <ul> <li> <code>PrintCallback</code>           \u2013            <p>Only prints the parameters received.</p> </li> <li> <code>SlaveDriver</code>           \u2013            <p>Fill This.</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave.PrintCallback","title":"PrintCallback","text":"<p>Only prints the parameters received.</p> <p>Methods:</p> <ul> <li> <code>anyothervipcmd</code>             \u2013              <p>Any other command that is mentioned in VIP document.</p> </li> <li> <code>read</code>             \u2013              <p>Read?</p> </li> <li> <code>write</code>             \u2013              <p>Write?</p> </li> </ul>"},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave.PrintCallback.anyothervipcmd","title":"anyothervipcmd","text":"<pre><code>anyothervipcmd() -&gt; None\n</code></pre> <p>Any other command that is mentioned in VIP document.</p> Source code in <code>src/cocotb_vip_templates/driver_slave.py</code> <pre><code>def anyothervipcmd(self) -&gt; None:\n    \"\"\"Any other command that is mentioned in VIP document.\"\"\"\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave.PrintCallback.read","title":"read","text":"<pre><code>read(address: int, length: int = 4) -&gt; bytes\n</code></pre> <p>Read?</p> Source code in <code>src/cocotb_vip_templates/driver_slave.py</code> <pre><code>def read(self, address: int, length: int = 4) -&gt; bytes:\n    \"\"\"Read?\"\"\"\n    cocotb.log.info(\n        f\"Dummy read callback got {address} {length}returning 4 bytes of 0\",\n    )\n    return int.to_bytes(0, 4, \"little\")\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave.PrintCallback.write","title":"write","text":"<pre><code>write(address: int, data: bytes) -&gt; None\n</code></pre> <p>Write?</p> Source code in <code>src/cocotb_vip_templates/driver_slave.py</code> <pre><code>def write(self, address: int, data: bytes) -&gt; None:\n    \"\"\"Write?\"\"\"\n    cocotb.log.info(\n        f\"Dummy write callback got {address} {data} doing nothing.\",  # type:ignore[str-bytes-safe]\n    )\n</code></pre>"},{"location":"reference/cocotb_vip_templates/driver_slave/#cocotb_vip_templates.driver_slave.SlaveDriver","title":"SlaveDriver","text":"<pre><code>SlaveDriver(*, callback: Any = None)\n</code></pre> <p>Fill This.</p> Source code in <code>src/cocotb_vip_templates/driver_slave.py</code> <pre><code>def __init__(self, *, callback: typing.Any = None):\n    \"\"\"Constructor.\"\"\"\n    if callback is None:\n        callback = PrintCallback()\n</code></pre>"},{"location":"reference/cocotb_vip_templates/monitor/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> monitor","text":""},{"location":"reference/cocotb_vip_templates/monitor/#cocotb_vip_templates.monitor","title":"monitor","text":"<p>Monitor Class.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}